/* ***************************************************************************

Copyright (c): 2013 Hericus Software, Inc.

License: The MIT License (MIT)

Authors: Steven M. Cherry

*************************************************************************** */

#include <twine.h>
#include <Log.h>
#include <EnEx.h>
#include <dptr.h>
#include <Timer.h>
#include <HttpClient.h>
using namespace SLib;

#include "HelixApi.h"
using namespace Helix::Client;

/* ***************************************************************************** */
/* The implementation of HelixApi is broken up into 2 .cpp files.  This one is   */
/* auto-generated during the compile.                                            */
/* DO NOT EDIT THIS FILE.                                                        */
/* Edits to this file will be overwritten during the next compile.               */
/* ***************************************************************************** */

xmlDocPtr HelixApi::GetLogMsgCount( const LogMessageFilter& dataObj )
{
	EnEx ee(FL, "HelixApi::GetLogMsgCount( const LogMessageFilter& dataObj )");

	// First build the request XML Document
	sptr<xmlDoc, xmlFreeDoc> request = xmlNewDoc((const xmlChar*)"1.0");
	request->children = xmlNewDocNode(request, NULL, (const xmlChar*)"GetLogMsgCount", NULL);
	xmlNodePtr root = xmlDocGetRootElement(request);

	dataObj.createXmlNode( root );

	// Now send the request to the server.
	return SendRequest( request, "/logic/util/GetLogMsgCount");
}

xmlDocPtr HelixApi::CloseConnection( )
{
	EnEx ee(FL, "HelixApi::CloseConnection( )");

	// First build the request XML Document
	sptr<xmlDoc, xmlFreeDoc> request = xmlNewDoc((const xmlChar*)"1.0");
	request->children = xmlNewDocNode(request, NULL, (const xmlChar*)"CloseConnection", NULL);
	xmlNodePtr root = xmlDocGetRootElement(request);


	// Now send the request to the server.
	return SendRequest( request, "/logic/util/CloseConnection");
}

xmlDocPtr HelixApi::GetAllLayouts( )
{
	EnEx ee(FL, "HelixApi::GetAllLayouts( )");

	// First build the request XML Document
	sptr<xmlDoc, xmlFreeDoc> request = xmlNewDoc((const xmlChar*)"1.0");
	request->children = xmlNewDocNode(request, NULL, (const xmlChar*)"GetAllLayouts", NULL);
	xmlNodePtr root = xmlDocGetRootElement(request);


	// Now send the request to the server.
	return SendRequest( request, "/logic/util/GetAllLayouts");
}

xmlDocPtr HelixApi::GetLogSettings( )
{
	EnEx ee(FL, "HelixApi::GetLogSettings( )");

	// First build the request XML Document
	sptr<xmlDoc, xmlFreeDoc> request = xmlNewDoc((const xmlChar*)"1.0");
	request->children = xmlNewDocNode(request, NULL, (const xmlChar*)"GetLogSettings", NULL);
	xmlNodePtr root = xmlDocGetRootElement(request);


	// Now send the request to the server.
	return SendRequest( request, "/logic/util/GetLogSettings");
}

xmlDocPtr HelixApi::GetLogMessagesByRange( const LogMessageFilter& dataObj )
{
	EnEx ee(FL, "HelixApi::GetLogMessagesByRange( const LogMessageFilter& dataObj )");

	// First build the request XML Document
	sptr<xmlDoc, xmlFreeDoc> request = xmlNewDoc((const xmlChar*)"1.0");
	request->children = xmlNewDocNode(request, NULL, (const xmlChar*)"GetLogMessagesByRange", NULL);
	xmlNodePtr root = xmlDocGetRootElement(request);

	dataObj.createXmlNode( root );

	// Now send the request to the server.
	return SendRequest( request, "/logic/util/GetLogMessagesByRange");
}

xmlDocPtr HelixApi::GetHitMap( )
{
	EnEx ee(FL, "HelixApi::GetHitMap( )");

	// First build the request XML Document
	sptr<xmlDoc, xmlFreeDoc> request = xmlNewDoc((const xmlChar*)"1.0");
	request->children = xmlNewDocNode(request, NULL, (const xmlChar*)"GetHitMap", NULL);
	xmlNodePtr root = xmlDocGetRootElement(request);


	// Now send the request to the server.
	return SendRequest( request, "/logic/util/GetHitMap");
}

xmlDocPtr HelixApi::CleanoutLRTask( const LRTask& dataObj )
{
	EnEx ee(FL, "HelixApi::CleanoutLRTask( const LRTask& dataObj )");

	// First build the request XML Document
	sptr<xmlDoc, xmlFreeDoc> request = xmlNewDoc((const xmlChar*)"1.0");
	request->children = xmlNewDocNode(request, NULL, (const xmlChar*)"CleanoutLRTask", NULL);
	xmlNodePtr root = xmlDocGetRootElement(request);

	dataObj.createXmlNode( root );

	// Now send the request to the server.
	return SendRequest( request, "/logic/util/CleanoutLRTask");
}

xmlDocPtr HelixApi::GetAllLRTasks( )
{
	EnEx ee(FL, "HelixApi::GetAllLRTasks( )");

	// First build the request XML Document
	sptr<xmlDoc, xmlFreeDoc> request = xmlNewDoc((const xmlChar*)"1.0");
	request->children = xmlNewDocNode(request, NULL, (const xmlChar*)"GetAllLRTasks", NULL);
	xmlNodePtr root = xmlDocGetRootElement(request);


	// Now send the request to the server.
	return SendRequest( request, "/logic/util/GetAllLRTasks");
}

xmlDocPtr HelixApi::SaveLogMsg( const LogObj& dataObj )
{
	EnEx ee(FL, "HelixApi::SaveLogMsg( const LogObj& dataObj )");

	// First build the request XML Document
	sptr<xmlDoc, xmlFreeDoc> request = xmlNewDoc((const xmlChar*)"1.0");
	request->children = xmlNewDocNode(request, NULL, (const xmlChar*)"SaveLogMsg", NULL);
	xmlNodePtr root = xmlDocGetRootElement(request);

	dataObj.createXmlNode( root );

	// Now send the request to the server.
	return SendRequest( request, "/logic/util/SaveLogMsg");
}

xmlDocPtr HelixApi::FindLogMessage( const LogMessageFilter& dataObj )
{
	EnEx ee(FL, "HelixApi::FindLogMessage( const LogMessageFilter& dataObj )");

	// First build the request XML Document
	sptr<xmlDoc, xmlFreeDoc> request = xmlNewDoc((const xmlChar*)"1.0");
	request->children = xmlNewDocNode(request, NULL, (const xmlChar*)"FindLogMessage", NULL);
	xmlNodePtr root = xmlDocGetRootElement(request);

	dataObj.createXmlNode( root );

	// Now send the request to the server.
	return SendRequest( request, "/logic/util/FindLogMessage");
}

xmlDocPtr HelixApi::UpdateLogSettings( const LogSettings& dataObj )
{
	EnEx ee(FL, "HelixApi::UpdateLogSettings( const LogSettings& dataObj )");

	// First build the request XML Document
	sptr<xmlDoc, xmlFreeDoc> request = xmlNewDoc((const xmlChar*)"1.0");
	request->children = xmlNewDocNode(request, NULL, (const xmlChar*)"UpdateLogSettings", NULL);
	xmlNodePtr root = xmlDocGetRootElement(request);

	dataObj.createXmlNode( root );

	// Now send the request to the server.
	return SendRequest( request, "/logic/util/UpdateLogSettings");
}

xmlDocPtr HelixApi::GetProfile( )
{
	EnEx ee(FL, "HelixApi::GetProfile( )");

	// First build the request XML Document
	sptr<xmlDoc, xmlFreeDoc> request = xmlNewDoc((const xmlChar*)"1.0");
	request->children = xmlNewDocNode(request, NULL, (const xmlChar*)"GetProfile", NULL);
	xmlNodePtr root = xmlDocGetRootElement(request);


	// Now send the request to the server.
	return SendRequest( request, "/logic/util/GetProfile");
}

xmlDocPtr HelixApi::GetOneLRTask( const LRTask& dataObj )
{
	EnEx ee(FL, "HelixApi::GetOneLRTask( const LRTask& dataObj )");

	// First build the request XML Document
	sptr<xmlDoc, xmlFreeDoc> request = xmlNewDoc((const xmlChar*)"1.0");
	request->children = xmlNewDocNode(request, NULL, (const xmlChar*)"GetOneLRTask", NULL);
	xmlNodePtr root = xmlDocGetRootElement(request);

	dataObj.createXmlNode( root );

	// Now send the request to the server.
	return SendRequest( request, "/logic/util/GetOneLRTask");
}

xmlDocPtr HelixApi::SwitchServerConnection( const LogOn& dataObj )
{
	EnEx ee(FL, "HelixApi::SwitchServerConnection( const LogOn& dataObj )");

	// First build the request XML Document
	sptr<xmlDoc, xmlFreeDoc> request = xmlNewDoc((const xmlChar*)"1.0");
	request->children = xmlNewDocNode(request, NULL, (const xmlChar*)"SwitchServerConnection", NULL);
	xmlNodePtr root = xmlDocGetRootElement(request);

	dataObj.createXmlNode( root );

	// Now send the request to the server.
	return SendRequest( request, "/logic/util/SwitchServerConnection");
}

xmlDocPtr HelixApi::ExecuteGenericSQL( const SQLStatement& dataObj )
{
	EnEx ee(FL, "HelixApi::ExecuteGenericSQL( const SQLStatement& dataObj )");

	// First build the request XML Document
	sptr<xmlDoc, xmlFreeDoc> request = xmlNewDoc((const xmlChar*)"1.0");
	request->children = xmlNewDocNode(request, NULL, (const xmlChar*)"ExecuteGenericSQL", NULL);
	xmlNodePtr root = xmlDocGetRootElement(request);

	dataObj.createXmlNode( root );

	// Now send the request to the server.
	return SendRequest( request, "/logic/util/ExecuteGenericSQL");
}

xmlDocPtr HelixApi::GetLogMessages( const LogMessageFilter& dataObj )
{
	EnEx ee(FL, "HelixApi::GetLogMessages( const LogMessageFilter& dataObj )");

	// First build the request XML Document
	sptr<xmlDoc, xmlFreeDoc> request = xmlNewDoc((const xmlChar*)"1.0");
	request->children = xmlNewDocNode(request, NULL, (const xmlChar*)"GetLogMessages", NULL);
	xmlNodePtr root = xmlDocGetRootElement(request);

	dataObj.createXmlNode( root );

	// Now send the request to the server.
	return SendRequest( request, "/logic/util/GetLogMessages");
}

xmlDocPtr HelixApi::GetLogFiles( )
{
	EnEx ee(FL, "HelixApi::GetLogFiles( )");

	// First build the request XML Document
	sptr<xmlDoc, xmlFreeDoc> request = xmlNewDoc((const xmlChar*)"1.0");
	request->children = xmlNewDocNode(request, NULL, (const xmlChar*)"GetLogFiles", NULL);
	xmlNodePtr root = xmlDocGetRootElement(request);


	// Now send the request to the server.
	return SendRequest( request, "/logic/util/GetLogFiles");
}

