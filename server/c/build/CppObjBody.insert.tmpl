/* ************************************************************************************** */
/* This is an INSERT method.  It is designed to run a single insert                       */
/* statement and return.  If something  goes wrong, we will throw AnException.            */
/*                                                                                        */
/* Developer Comments:                                                                    */
/* ${comment} */
/*                                                                                        */
/* Sql Statement:                                                                         */
/* ${sql} */
/*                                                                                        */
/* ************************************************************************************** */
void ${doName}::${methodName}(OdbcObj& odbc, ${doName}& obj )
{
	EnEx ee(FL, "${doName}::${methodName}()");

	twine stmt = "${flatSql}";

	${doName}::${methodName}(odbc, stmt, true, obj );

}

/* ************************************************************************************** */
/* This one matches the above in functionality, but allows you to pass in the sql         */
/* statement and a flag to indicate whether the input parameters will be used.            */
/* ************************************************************************************** */
void ${doName}::${methodName}(OdbcObj& odbc, twine& stmt, bool useInputs, ${doName}& obj )
{
	EnEx ee(FL, "${doName}::${methodName}()");

	if(odbc.isConnected() == 0){
		throw AnException(0, FL, "OdbcObj passed into ${doName}::${methodName} is not connected.");
	}

	${SizeofInt}
	${SizeofFloat}

	SQLTRACE(FL, "Using SQL: %s", stmt() );
	odbc.SetStmt(stmt, SQL_TYPE_UPDATE);

	{ // Used for scope for the timing object.
		EnEx eeExe("${doName}::${methodName}()-BindExecStmt");

		// Bind the inputs
		if(useInputs){
${OdbcBindObjInputs}
		} // if(useInputs)

		// Execute the statement
		DEBUG(FL, "Executing the statement for ${doName}::${methodName}");
		odbc.ExecStmt();
	}

	// That's it.
	return;
}

/* ************************************************************************************** */
/* This method will do a replacement of all of the parameter markers in                   */
/* the sql statement with the standard parameter list that is defined.                    */
/* This is useful for automatically prepping a SQL statement that doesn't                 */
/* work with parameter markers.                                                           */
/* ************************************************************************************** */
twine ${doName}::${methodName}_prepSQL(IOConn& ioc, ${doName}& obj )
{
	EnEx ee(FL, "${doName}::${methodName}_prepSQL()");

	size_t idx = 0;
	twine stmt = "${flatSql}";

${SqlReplaceObjParms}

	// Also take a look at the statement and replace any session variables
	Statics::ReplaceSessionVars(ioc, stmt);

	return stmt;

}

